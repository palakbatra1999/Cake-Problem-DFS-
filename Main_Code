char a[NMAX][NMAX];
bool is_safe(int i,int j,int n)
{
    if(i>=0&&i<n&&j>=0&&j<n)
        return true;
    return false;
}
int dfs(int n,int i,int j)
{
    if(a[i][j]=='2'||a[i][j]=='0')
        return 0;
   if(is_safe(i,j,n))
  {  a[i][j]='2';
    return 1+dfs(n,i+1,j)+dfs(n,i-1,j)+dfs(n,i,j+1)+dfs(n,i,j-1);
  }
    return 0;
   
}
int solve(int n,char cake[NMAX][NMAX])
{
  
	int i,j,ans=0,m=0;
    
     for(i=0;i<n;i++)
        for(j=0;j<n;j++)
        a[i][j]=cake[i][j];
    
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
         if(a[i][j]=='1')  
         {
             ans=dfs(n,i,j);
             m=max(m,ans); 
         }
        }
    }
  return m;
}
